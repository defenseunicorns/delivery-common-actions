name: Run E2E Tests

description: Run E2E Tests

inputs:
  # either pass in a token, or an app id and private key
  token:
    description: 'The GitHub token to use for authentication'
    required: false
  application_id:
    description: 'The GitHub App ID'
    required: false
  application_private_key:
    description: 'The GitHub App private key'
    required: false
  region:
    description: The AWS region to deploy to
    required: true
  role-to-assume:
    description: The AWS IAM Role to assume in the target account
    required: true
  send-status:
    description: Whether to send status updates to GitHub
    required: false
    default: true
  github-context:
    description: The GitHub Status Context to use when updating the status
    required: false
    default: 'default e2e test context'
  test-to-run:
    description: Which test to run, either "secure" or "insecure"
    required: true

runs:
  using: composite
  steps:

    - name: Get token
      id: get_installation_token
      uses: peter-murray/workflow-application-token-action@v2
      if: ${{ !inputs.token }}
      with:
        application_id: ${{ inputs.application_id }}
        application_private_key: ${{ inputs.application_private_key }}

    # Update GitHub status for pending pipeline run
    - name: "Update GitHub Status for pending"
      uses: docker://cloudposse/github-status-updater
      if: ${{ inputs.send-status == 'true' }}
      with:
        args: "-action update_state -state pending -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.event.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token || steps.get_installation_token.outputs.token }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "started by @${{ github.event.client_payload.github.actor || github.actor }}"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.event.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

    - name: Validate test-to-run input
      shell: bash -e -o pipefail {0}
      run: |
          if [[ "${{ inputs.test-to-run }}" != "secure" && "${{ inputs.test-to-run }}" != "insecure" ]]; then
          echo "Invalid test-to-run input: '${{ inputs.test-to-run }}'. Valid inputs are 'secure' or 'insecure'."
          exit 1
          fi

    - name: Checkout Repo for chatOps
      uses: actions/checkout@v4
      with:
        token: ${{ inputs.token || steps.get_installation_token.outputs.token }}
        repository: ${{ github.event.client_payload.pull_request.head.repo.full_name || github.repository }}
        ref: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}

    - name: Get versions of relevant tools for github cache
      id: get_tool_versions
      shell: bash -e -o pipefail {0}
      run: |
        echo "TF_VERSION=$(asdf list terraform | sed 's/\*//')" >> $GITHUB_OUTPUT
        echo "GOLANG_VERSION=$(asdf list golang | sed 's/\*//')" >> $GITHUB_OUTPUT
        echo "ZARF_VERSION=$(asdf list zarf | sed 's/\*//')" >> $GITHUB_OUTPUT
        echo "BUILD_HARNESS_VERSION=$(grep BUILD_HARNESS_VERSION .env | awk -F'=' '{print $2}')" >> $GITHUB_OUTPUT


    - name: Init gopath cache
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/.cache/go"
        key: "gopath|${{ steps.get_tool_versions.outputs.GOLANG_VERSION }}|${{ hashFiles('go.sum') }}"

    - name: Init gobuild cache
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/.cache/go-build"
        key: "gobuild|${{ steps.get_tool_versions.outputs.GOLANG_VERSION }}|${{ hashFiles('go.sum') }}"

    - name: Init zarf cache
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/.cache/.zarf-cache"
        key: "zarf|${{ steps.get_tool_versions.outputs.ZARF_VERSION }}"

    - name: Init docker cache
      id: init-docker-cache
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/.cache/docker"
        key: "docker|${{ steps.get_tool_versions.outputs.BUILD_HARNESS_VERSION }}"

    - name: Docker save build harness
      if: steps.init-docker-cache.outputs.cache-hit != 'true'
      shell: bash -e -o pipefail {0}
      run: |
        make docker-save-build-harness

    - name: Load build harness
      shell: bash -e -o pipefail {0}
      run: |
        make docker-load-build-harness

    - name: Init Terraform Cache
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/.cache/.terraform.d/plugin-cache"
        key: "${{ runner.os }}-terraform-plugins|${{ steps.get_tool_versions.outputs.TF_VERSION }}|${{ hashFiles('examples/complete/providers.tf') }}"

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.role-to-assume }}
        role-session-name: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}_${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        aws-region: ${{ inputs.region }}
        # 21600 seconds == 6 hours
        role-duration-seconds: 21600

    - name: "Run E2E tests"
      shell: bash -e -o pipefail {0}
      id: run_e2e
      continue-on-error: true
      env:
        TF_VAR_region: ${{ inputs.region }}
        TF_VAR_tags: '{"Pull Request": "${{ github.event.client_payload.github.payload.issue.html_url }}","PR Comment ID": "${{ github.event.client_payload.github.payload.comment.id }}"}'
      run: |
        echo "Running E2E  ${{ inputs.test-to-run }} test" && \
        make test-complete-${{ inputs.test-to-run }} fix-cache-permissions

    # this is because the github installation token expires after an hour, non-configurable, sometimes the tests take longer than an hour
    # https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/generating-an-installation-access-token-for-a-github-app
    - name: "Get token again"
      id: get_installation_token_again
      if: ${{ inputs.send-status == 'true' && !inputs.token }}
      uses: peter-murray/workflow-application-token-action@v2
      with:
        application_id: ${{ inputs.application_id }}
        application_private_key: ${{ inputs.application_private_key }}

    # Update GitHub status
    - name: "Update github status for failure or success"
      if: ${{ inputs.send-status == 'true' }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state ${{ env.GITHUB_STATE }} -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.event.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token || steps.get_installation_token_again.outputs.token }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "run status: ${{ steps.run_e2e.outcome }}"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.event.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}
        GITHUB_STATE: ${{ steps.run_e2e.outcome == 'cancelled' && 'error' || steps.run_e2e.outcome }}

    # this is because the github installation token expires after an hour, non-configurable, sometimes the tests take longer than an hour, also WHEN cancelled
    # https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/generating-an-installation-access-token-for-a-github-app
    - name: "Get token again if cancelled"
      id: get_installation_token_again_cancelled
      if: ${{ inputs.send-status == 'true' && !inputs.token && cancelled() }}
      uses: peter-murray/workflow-application-token-action@v2
      with:
        application_id: ${{ inputs.application_id }}
        application_private_key: ${{ inputs.application_private_key }}


    # Update GitHub status for cancelled pipeline run
    - name: "Update GitHub Status for cancelled"
      if: ${{ inputs.send-status == 'true' && cancelled() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state ${{ env.GITHUB_STATE }} -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.event.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token || steps.get_installation_token_again_cancelled.outputs.token }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "run status: ${{ steps.run_e2e.outcome }}"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.event.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}
        GITHUB_STATE: ${{ steps.run_e2e.outcome == 'cancelled' && 'error' || steps.run_e2e.outcome }}

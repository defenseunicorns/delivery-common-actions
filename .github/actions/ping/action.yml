name: Ping test

description: Simple test that validates that an action can update a workflow status.

inputs:
  # either pass in a token, or an app id and private key
  token:
    description: "The GitHub token to use for authentication"
    required: false
  application_id:
    description: "The GitHub App ID"
    required: false
  application_private_key:
    description: "The GitHub App private key"
    required: false

runs:
  using: composite
  steps:
    - name: Get token
      id: get_installation_token
      uses: peter-murray/workflow-application-token-action@8e4e6fbf6fcc8a272781d97597969d21b3812974 # v4
      if: ${{ !inputs.token }}
      with:
        application_id: ${{ inputs.application_id }}
        application_private_key: ${{ inputs.application_private_key }}

    - name: debug
      uses: hmarr/debug-action@v3

    # Update GitHub status for dispatch events
    - name: "Update GitHub Status for this ref"
      if: github.event_name == 'repository_dispatch'
      uses: "docker://cloudposse/github-status-updater"
      with:
        args: "-action update_state -state success -ref ${{ github.event.client_payload.pull_request.head.sha }} -repo ${{ github.event.client_payload.github.payload.repository.name }}"
      env:
        GITHUB_TOKEN: ${{ inputs.token || steps.get_installation_token.outputs.token }}
        GITHUB_CONTEXT: "ping"
        GITHUB_DESCRIPTION: "pong"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login }}

    - name: Debug slash command args
      shell: bash -e -o pipefail {0}
      run: |
        echo "Args Named: ${{ toJson(github.event.client_payload.slash_command.args.named) }}"
        echo "Contains 'make': ${{ contains(github.event.client_payload.slash_command.args.named, 'make') }}"
        echo "Contains 'region': ${{ contains(github.event.client_payload.slash_command.args.named, 'region') }}"
        # contains both make and region
        echo "Contains 'make' and 'region': ${{ contains(github.event.client_payload.slash_command.args.named, 'make') && contains(github.event.client_payload.slash_command.args.named, 'region') }}"
        # echo formatted string using make and region
        echo ${{ format('[{{"make-target":"{0}", "region":"{1}"}}]', github.event.client_payload.slash_command.args.named.make, github.event.client_payload.slash_command.args.named.region) }}

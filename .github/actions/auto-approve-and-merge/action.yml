name: Auto approve and merge

description: Auto approve and merge

inputs:
  # either pass in a token, or an app id and private key
  token:
    description: "The GitHub token to use for authentication"
    required: false
  application_id:
    description: "The GitHub App ID"
    required: false
  application_private_key:
    description: "The GitHub App private key"
    required: false
  branch:
    description: "The branch to merge into"
    required: false
    default: "main"
  checks:
    description: "The checks to wait for before merging"
    required: false
    default: "pre-commit-checks"

runs:
  using: composite
  steps:
    - name: Get token
      id: get_installation_token
      uses: peter-murray/workflow-application-token-action@8e4e6fbf6fcc8a272781d97597969d21b3812974 # v4
      if: ${{ !inputs.token }}
      with:
        application_id: ${{ inputs.application_id }}
        application_private_key: ${{ inputs.application_private_key }}

    - name: Auto approve
      uses: hmarr/auto-approve-action@v3
      with:
        github-token: ${{ inputs.token || steps.get_installation_token.outputs.token }}
        review-message: "Auto approved"

    - name: Wait commit status
      uses: cloudposse/github-action-wait-commit-status@main
      with:
        repository: ${{ github.repository }}
        sha: ${{ github.sha }}
        status: ${{ inputs.checks }}
        lookup: "success"
        token: ${{ github.token }}
        check-timeout: 300
        check-retry-count: 5
        check-retry-interval: 60

    - name: Auto Merge
      shell: bash -e -o pipefail {0}
      env:
        GH_TOKEN: ${{ inputs.token || steps.get_installation_token.outputs.token }}
      run: |
        # GraphQL mutation as a string
        GRAPHQL_MUTATION='
          mutation enableAutoMerge($pullRequestId: ID!) {
            enablePullRequestAutoMerge(input: {
              pullRequestId: $pullRequestId
            }) {
              pullRequest {
                number
                autoMergeRequest {
                  enabledAt
                  enabledBy {
                    login
                  }
                }
              }
            }
          }
        '

        # Use jq to create the JSON payload
        JSON_PAYLOAD=$(jq -n \
                          --arg query "$GRAPHQL_MUTATION" \
                          --arg pullRequestId "${{ github.event.pull_request.node_id }}" \
                          '{query: $query, variables: {pullRequestId: $pullRequestId}}')

        # Use curl to send the GraphQL mutation
        curl -X POST \
            --fail-with-body \
            --oauth2-bearer "$(gh auth token)" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            https://api.github.com/graphql

    - name: Add to merge queue
      shell: bash -e -o pipefail {0}
      env:
        GH_TOKEN: ${{ inputs.token || steps.get_installation_token.outputs.token }}
        PR_ID: ${{ github.event.pull_request.node_id }}
      run: |
        gh api graphql \
          -f pullRequestId=$PR_ID \
          -f query='
            mutation(
              $pullRequestId: ID!
            ) {
              enqueuePullRequest(input: {
                pullRequestId: $pullRequestId
              }) {
                clientMutationId mergeQueueEntry {
                  position estimatedTimeToMerge pullRequest {
                    title number
                  }
                }
              }
            }'

    - name: Check if PR has been added to the merge queue in a loop
      shell: bash -ex -o pipefail {0}
      env:
        GH_TOKEN: ${{ inputs.token || steps.get_installation_token.outputs.token }}
      run: |
        # GraphQL query as a string
        GRAPHQL_QUERY=$(cat <<EOF
        query(\$name:String!, \$owner:String!){
          repository(name:\$name, owner:\$owner) {
            mergeQueue(branch:"main") {
              entries(first:5){
                nodes{
                  pullRequest{
                    id
                  }
                }
              }
            }
          }
        }
        EOF
        )

        # Variables to be used in the query
        REPO_NAME="${{ github.event.repository.name  }}"
        REPO_OWNER="${{ github.event.organization.login }}"
        PR_NODE_ID="${{ github.event.pull_request.node_id }}"

        # Use jq to create the JSON payload
        JSON_PAYLOAD=$(jq -n \
                            --arg name "$REPO_NAME" \
                            --arg owner "$REPO_OWNER" \
                            --arg query "$GRAPHQL_QUERY" \
                            '{query: $query, variables: {name: $name, owner: $owner}}')

        # Loop until the specific PR ID is found
        while true; do

          # Use curl to send the GraphQL query
          RESPONSE=$(curl -X POST \
            --fail-with-body \
            --oauth2-bearer "$(gh auth token)" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            https://api.github.com/graphql)

            echo $RESPONSE

            # Check if the specific PR ID is in the response
            if echo "$RESPONSE" | jq -e --arg prId "$PR_NODE_ID" '.data.repository.mergeQueue.entries.nodes[].pullRequest.id | contains($prId)' > /dev/null; then
              echo "PR with ID $PR_NODE_ID is in the merge queue."
              break
            else
              echo "PR with ID $PR_NODE_ID is not in the merge queue yet."
            fi

            # Wait for 10 seconds
            sleep 10
        done

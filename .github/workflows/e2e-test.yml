name: e2e-test

on:
  workflow_call:
    secrets:
      TOKEN:
        description: "GitHub App Token"
        required: false
      APPLICATION_ID:
        description: "The GitHub App ID"
        required: false
      APPLICATION_PRIVATE_KEY:
        description: "The GitHub App Private Key"
        required: false
      AWS_COMMERCIAL_ROLE_TO_ASSUME:
        description: "AWS IAM Role to assume"
        required: true
      AWS_GOVCLOUD_ROLE_TO_ASSUME:
        description: "AWS Govcloud IAM Role to assume"
        required: true

    inputs:
      # this workflow will use this input first, else will build its own e2e-test-matrix and do all e2e tests
      e2e-test-matrix:
        description: "make target and region to run e2e tests on, must be json formatted"
        type: string
        required: false
      e2e-required-status-check:
        description: "status check to report when e2e tests are complete"
        type: string
        required: false
        default: '["e2e-tests"]'
      release-branch:
        description: "if this is a release branch, determines the e2e test matrix to use"
        type: boolean
        required: false
        default: false
      debug:
        description: "debug mode"
        type: boolean
        required: false
        default: false

jobs:
  # Build e2e test matrix from available make targets in the repo
  set-test-vars:
    runs-on: ubuntu-latest
    if: ${{ ! (github.event_name == 'repository_dispatch' && contains(github.event.client_payload.slash_command.args.unnamed.all, 'ping')) }}
    outputs:
      e2e-test-matrix: ${{ steps.set_test_vars.outputs.e2e-test-matrix }}
    steps:
      - name: Set Vars
        id: set_test_vars
        env:
          IS_RELEASE_BRANCH: ${{ inputs.release-branch }}
        uses: defenseunicorns/delivery-github-actions-workflows/.github/actions/set-test-vars@main
        with:
          application_id: ${{ secrets.APPLICATION_ID }}
          application_private_key: ${{ secrets.APPLICATION_PRIVATE_KEY }}
          token: ${{ secrets.TOKEN }}

  # Update the comment that triggered the /test command to show the run url. Only runs if this is called by repository_dispatch event
  comment:
    runs-on: ubuntu-latest
    if: github.event_name == 'repository_dispatch'
    steps:
      - name: Update Comment
        uses: defenseunicorns/delivery-github-actions-workflows/.github/actions/comment@main
        with:
          application_id: ${{ secrets.APPLICATION_ID }}
          application_private_key: ${{ secrets.APPLICATION_PRIVATE_KEY }}
          token: ${{ secrets.TOKEN }}

  get-buildharness-software-versions:
    runs-on: ubuntu-latest
    if: ${{ ! (github.event_name == 'repository_dispatch' && contains(github.event.client_payload.slash_command.args.unnamed.all, 'ping')) }}
    outputs:
      buildharness_version: ${{ steps.buildharness_software_versions.outputs.buildharness_version }}
      golang_version: ${{ steps.buildharness_software_versions.outputs.golang_version }}
      terraform_version: ${{ steps.buildharness_software_versions.outputs.terraform_version }}
      zarf_version: ${{ steps.buildharness_software_versions.outputs.zarf_version }}
    steps:
      - name: Get buildharness software versions
        id: buildharness_software_versions
        uses: defenseunicorns/delivery-github-actions-workflows/.github/actions/get-buildharness-software-versions@main
        with:
          application_id: ${{ secrets.APPLICATION_ID }}
          application_private_key: ${{ secrets.APPLICATION_PRIVATE_KEY }}
          token: ${{ secrets.TOKEN }}

  # Do a simple ping/pong status update to validate things are working, only triggered when sourced from repository_dispatch events
  ping:
    runs-on: ubuntu-latest
    if: github.event_name == 'repository_dispatch' && contains(github.event.client_payload.slash_command.args.unnamed.all, 'ping')
    steps:
      - name: Ping Test
        uses: defenseunicorns/delivery-github-actions-workflows/.github/actions/ping@main
        with:
          application_id: ${{ secrets.APPLICATION_ID }}
          application_private_key: ${{ secrets.APPLICATION_PRIVATE_KEY }}
          token: ${{ secrets.TOKEN }}

  determine-matrix:
    runs-on: ubuntu-latest
    needs: set-test-vars
    outputs:
      e2e-test-matrix: ${{ steps.set_matrix.outputs.E2E_TEST_MATRIX }}
    steps:
    - id: set_matrix
      run: |
        if [[ "${{ inputs.e2e-test-matrix }}" != "" ]]; then
          echo "E2E_TEST_MATRIX=$(echo '${{ toJSON(fromJSON(inputs.e2e-test-matrix)) }}' | jq -c)" >> $GITHUB_OUTPUT
        else
          echo "E2E_TEST_MATRIX=$(echo '${{ needs.set-test-vars.outputs.e2e-test-matrix }}' | jq -c)" >> $GITHUB_OUTPUT
        fi

  matrix_debug:
    runs-on: ubuntu-latest
    needs:
      - set-test-vars
      - determine-matrix
    if: inputs.debug
    strategy:
      matrix:
        include: ${{ fromJSON(needs.determine-matrix.outputs.e2e-test-matrix) }}
    steps:
    - name: Check
      env:
        MATRIX: ${{ toJSON(matrix) }}
      run: |
        echo "MATRIX: $(jq -r -c '.' <<< "$MATRIX")"

  # Run the E2E tests in a matrix of regions and make targets looping through the array
  # If inputs.e2e-test-matrix is provided, then we will use that matrix instead of using the one targeting all regions and matching make targets
  e2e-test:
    runs-on: ubuntu-latest
    needs:
      - get-buildharness-software-versions
      - set-test-vars
      - determine-matrix
    strategy:
      matrix:
        include: ${{ fromJSON(needs.determine-matrix.outputs.e2e-test-matrix) }}
    steps:
      - name: Run E2E Tests
        uses: defenseunicorns/delivery-github-actions-workflows/.github/actions/e2e@main
        with:
          application_id: ${{ secrets.APPLICATION_ID }}
          application_private_key: ${{ secrets.APPLICATION_PRIVATE_KEY }}
          token: ${{ secrets.TOKEN }}
          buildharness_version: ${{ needs.get-buildharness-software-versions.outputs.buildharness_version }}
          golang_version: ${{ needs.get-buildharness-software-versions.outputs.golang_version }}
          terraform_version: ${{ needs.get-buildharness-software-versions.outputs.terraform_version }}
          zarf_version: ${{ needs.get-buildharness-software-versions.outputs.zarf_version }}
          region: ${{ matrix.region }}
          github-context: "make / ${{ matrix.make-target }}"
          make-target: ${{ matrix.make-target }}
          role-to-assume: ${{ startsWith(matrix.region, 'us-gov') && secrets.AWS_GOVCLOUD_ROLE_TO_ASSUME || secrets.AWS_COMMERCIAL_ROLE_TO_ASSUME }} #determines which role to assume based on region name in matrix iteration

  # Update the required status check to success if all e2e tests passed
  report-e2e-test-status:
    uses: defenseunicorns/delivery-github-actions-workflows/.github/workflows/report-status.yml@main
    needs: e2e-test
    secrets:
      APPLICATION_ID: ${{ secrets.APPLICATION_ID }}
      APPLICATION_PRIVATE_KEY: ${{ secrets.APPLICATION_PRIVATE_KEY }}
      TOKEN: ${{ secrets.TOKEN }}
    with:
      status-checks: ${{ inputs.e2e-required-status-check }}
      description: "E2E tests"
      status: ${{ needs.e2e-test.result == 'cancelled' && 'error' || needs.e2e-test.result }}
